// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String?
  image       String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CourseRegistration {
  id             String   @id @default(cuid())
  email          String
  phone          String?
  childrens      String[]
  childFullName  String
  childrenAge    Int
  parentFullName String
  parentRelation String
  country        String
  noteBookPosted Boolean?
  address        String
  fee            Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Payment        Payment[]
}

//payment related to CourseRegistration
model Payment {
  id                   String   @id @default(cuid())
  courseRegistrationId String
  
  // Stripe payment details
  stripeSessionId      String?  @unique
  stripePaymentIntentId String? @unique
  stripeCustomerId     String?
  
  // Payment information
  amount               Float
  currency             String   @default("gbp")
  status               String   // pending, completed, failed, cancelled, refunded
  paymentMethod        String?  // card, bank_transfer, etc.
  
  // Metadata
  description          String?
  metadata             Json?    // For storing additional Stripe metadata
  
  // Timestamps
  paidAt               DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  courseRegistration   CourseRegistration @relation(fields: [courseRegistrationId], references: [id], onDelete: Cascade)
}


model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
